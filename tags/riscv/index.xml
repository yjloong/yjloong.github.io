<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Riscv on HOME</title>
    <link>https://yjloong.github.io/tags/riscv/</link>
    <description>Recent content in Riscv on HOME</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 13 Jul 2025 11:30:02 +0000</lastBuildDate>
    <atom:link href="https://yjloong.github.io/tags/riscv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>qemu使用one-insn-per-tb进行debug</title>
      <link>https://yjloong.github.io/post/qemu-debug/</link>
      <pubDate>Sun, 13 Jul 2025 11:30:02 +0000</pubDate>
      <guid>https://yjloong.github.io/post/qemu-debug/</guid>
      <description>&lt;h1 id=&#34;qemu-debug-尝试对某一段指令的执行情况进行跟踪类似arm-trace功能&#34;&gt;QEMU Debug 尝试对某一段指令的执行情况进行跟踪，类似arm trace功能&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;某一段程序的执行总是hang到一条riscv csrw指令，使用gdbserver debug时，卡在这一条指令的指令。&lt;/li&gt;&#xA;&lt;li&gt;通过gdb直接debug qemu-system-riscv64时，由于是x86机器，采用的加速器是tcg，riscv指令经过一种中间IR后最终翻译成x86指令，在code_gen_buffer指向的内存位置，针对这一块涉及tcg的调试异常艰难。有许多莫名奇妙的问题出现，如gdb backtrace打印出错、翻译指令延迟等。&lt;/li&gt;&#xA;&lt;li&gt;换用采用qemu带有的 &lt;strong&gt;-d help -D qemu.log&lt;/strong&gt; 方式进行debug时，不能捕获到这条执行执行前后的状态，因为qemu按指令块进行dump信息的。&lt;/li&gt;&#xA;&lt;li&gt;tcg为了加速翻译，代码段是一段一段进行翻译的，对应的qemu内结构体 &lt;strong&gt;struct TranslationBlock&lt;/strong&gt; ，但可以通过选项 &lt;strong&gt;&amp;ndash;accel tcg,one-insn-per-tb=on&lt;/strong&gt; 设定一条riscv指令对应一个block。&lt;/li&gt;&#xA;&lt;li&gt;启动上述功能后，执行速度会下降10/100倍，可以再通过 &lt;strong&gt;-dfilter 0x80080000..0x80090000&lt;/strong&gt; 设定捕获指令范围。&lt;/li&gt;&#xA;&lt;li&gt;捕获命令如下：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;qemu-system-riscv64 -M nemu -cpu rv64,sscofpmf&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;off,sstc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;on,zihpm&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;off,svpbmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;off -m 2G -bios gcpt.bin -nographic -dfilter 0x80000000..0x80010000 -d cpu -D qemu.log --accel tcg,one-insn-per-tb&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;on&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;捕获内容如下：&#xA;[image](/home/ubuntu/hugo_with_obsidian/static/images/Pasted image 20250707175106.png)&lt;/li&gt;&#xA;&lt;li&gt;如果想要捕获其他数据，可以修改如下源文件内容：&#xA;[image](/home/ubuntu/hugo_with_obsidian/static/images/Pasted image 20250707175502.png)&lt;/li&gt;&#xA;&lt;li&gt;例如，CSR处把所有CSR全写上，即可捕获状态机。&lt;/li&gt;&#xA;&lt;li&gt;根据env-&amp;gt;priv的变化，即可捕获优先级变化时的状态级。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
